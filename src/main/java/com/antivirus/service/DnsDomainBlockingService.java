package com.antivirus.service;

import com.antivirus.model.BlockedDomain;
import com.antivirus.repository.BlockedDomainRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.stream.Collectors;

/**
 * Service that handles domain blocking through DNS configuration
 * This provides system-wide blocking without modifying the hosts file
 */
@Service
public class DnsDomainBlockingService {
    private static final Logger logger = LoggerFactory.getLogger(DnsDomainBlockingService.class);
    
    @Autowired
    private BlockedDomainRepository blockedDomainRepository;
    
    private static final String DNS_CONFIG_PATH = "/etc/resolv.conf";
    private static final String DNS_BACKUP_PATH = "/etc/resolv.conf.backup";
    
    /**
     * Check if DNS config file is accessible
     */
    public boolean isDnsConfigAccessible() {
        try {
            Path dnsConfigPath = Paths.get(DNS_CONFIG_PATH);
            return Files.exists(dnsConfigPath) && Files.isWritable(dnsConfigPath);
        } catch (Exception e) {
            logger.warn("DNS config file is not accessible: {}", e.getMessage());
            return false;
        }
    }
    
    /**
     * Update DNS config with blocked domains
     */
    public void updateDnsConfig() {
        if (!isDnsConfigAccessible()) {
            logger.warn("Cannot update DNS config: file is not accessible");
            return;
        }
        
        try {
            // Get all active blocked domains
            List<BlockedDomain> blockedDomains = blockedDomainRepository.findByActiveTrue();
            
            // Create DNS config content
            StringBuilder dnsConfig = new StringBuilder();
            dnsConfig.append("# DNS configuration for domain blocking\n");
            dnsConfig.append("# Generated by Antivirus Software\n\n");
            
            // Add nameserver entries for blocked domains
            for (BlockedDomain domain : blockedDomains) {
                dnsConfig.append("nameserver 0.0.0.0 # Blocked: ").append(domain.getDomain()).append("\n");
            }
            
            // Add default nameservers
            dnsConfig.append("\n# Default nameservers\n");
            dnsConfig.append("nameserver 8.8.8.8\n"); // Google DNS
            dnsConfig.append("nameserver 1.1.1.1\n"); // Cloudflare DNS
            
            // Create backup if it doesn't exist
            Path backupPath = Paths.get(DNS_BACKUP_PATH);
            if (!Files.exists(backupPath)) {
                Files.copy(Paths.get(DNS_CONFIG_PATH), backupPath);
                logger.info("Created DNS config backup at {}", DNS_BACKUP_PATH);
            }
            
            // Write new DNS config
            Files.write(Paths.get(DNS_CONFIG_PATH), dnsConfig.toString().getBytes());
            logger.info("DNS config updated with {} blocked domains", blockedDomains.size());
            
        } catch (IOException e) {
            logger.error("Failed to update DNS config: {}", e.getMessage());
            throw new RuntimeException("Failed to update DNS config", e);
        }
    }
    
    /**
     * Restore DNS config from backup
     */
    public void restoreDnsConfig() {
        if (!isDnsConfigAccessible()) {
            logger.warn("Cannot restore DNS config: file is not accessible");
            return;
        }
        
        try {
            Path backupPath = Paths.get(DNS_BACKUP_PATH);
            if (!Files.exists(backupPath)) {
                logger.warn("DNS config backup not found at {}", DNS_BACKUP_PATH);
                return;
            }
            
            Files.copy(backupPath, Paths.get(DNS_CONFIG_PATH), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
            logger.info("DNS config restored from backup");
            
        } catch (IOException e) {
            logger.error("Failed to restore DNS config: {}", e.getMessage());
            throw new RuntimeException("Failed to restore DNS config", e);
        }
    }
    
    /**
     * Get instructions for configuring system to use DNS blocking
     */
    public Map<String, String> getDnsInstructions() {
        Map<String, String> instructions = new HashMap<>();
        
        // Windows instructions
        instructions.put("windows",
            "1. Open Network & Internet settings\n" +
            "2. Go to Network & Internet > Status > Network reset\n" +
            "3. Click 'Reset now' to apply DNS changes\n" +
            "4. Restart your computer");
            
        // macOS instructions
        instructions.put("macos",
            "1. Open Terminal\n" +
            "2. Run: sudo killall -HUP mDNSResponder\n" +
            "3. Run: sudo dscacheutil -flushcache\n" +
            "4. Restart your computer");
            
        // Linux instructions
        instructions.put("linux",
            "1. Open Terminal\n" +
            "2. Run: sudo systemctl restart systemd-resolved\n" +
            "3. Run: sudo systemd-resolve --flush-caches\n" +
            "4. Restart your computer");
            
        return instructions;
    }
} 